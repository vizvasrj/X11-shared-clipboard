// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: math.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClipboardServiceClient is the client API for ClipboardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClipboardServiceClient interface {
	SendClipboard(ctx context.Context, opts ...grpc.CallOption) (ClipboardService_SendClipboardClient, error)
}

type clipboardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClipboardServiceClient(cc grpc.ClientConnInterface) ClipboardServiceClient {
	return &clipboardServiceClient{cc}
}

func (c *clipboardServiceClient) SendClipboard(ctx context.Context, opts ...grpc.CallOption) (ClipboardService_SendClipboardClient, error) {
	stream, err := c.cc.NewStream(ctx, &ClipboardService_ServiceDesc.Streams[0], "/protobuf.ClipboardService/SendClipboard", opts...)
	if err != nil {
		return nil, err
	}
	x := &clipboardServiceSendClipboardClient{stream}
	return x, nil
}

type ClipboardService_SendClipboardClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type clipboardServiceSendClipboardClient struct {
	grpc.ClientStream
}

func (x *clipboardServiceSendClipboardClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clipboardServiceSendClipboardClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClipboardServiceServer is the server API for ClipboardService service.
// All implementations must embed UnimplementedClipboardServiceServer
// for forward compatibility
type ClipboardServiceServer interface {
	SendClipboard(ClipboardService_SendClipboardServer) error
	mustEmbedUnimplementedClipboardServiceServer()
}

// UnimplementedClipboardServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClipboardServiceServer struct {
}

func (UnimplementedClipboardServiceServer) SendClipboard(ClipboardService_SendClipboardServer) error {
	return status.Errorf(codes.Unimplemented, "method SendClipboard not implemented")
}
func (UnimplementedClipboardServiceServer) mustEmbedUnimplementedClipboardServiceServer() {}

// UnsafeClipboardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClipboardServiceServer will
// result in compilation errors.
type UnsafeClipboardServiceServer interface {
	mustEmbedUnimplementedClipboardServiceServer()
}

func RegisterClipboardServiceServer(s grpc.ServiceRegistrar, srv ClipboardServiceServer) {
	s.RegisterService(&ClipboardService_ServiceDesc, srv)
}

func _ClipboardService_SendClipboard_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClipboardServiceServer).SendClipboard(&clipboardServiceSendClipboardServer{stream})
}

type ClipboardService_SendClipboardServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type clipboardServiceSendClipboardServer struct {
	grpc.ServerStream
}

func (x *clipboardServiceSendClipboardServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clipboardServiceSendClipboardServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClipboardService_ServiceDesc is the grpc.ServiceDesc for ClipboardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClipboardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.ClipboardService",
	HandlerType: (*ClipboardServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendClipboard",
			Handler:       _ClipboardService_SendClipboard_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "math.proto",
}
